Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-1


				 
				assume cs:code 
 0000				code segment 
				 
				 
				 
 0000  E9 00DA R		setclock:   jmp setclockstart 
				         
 0003  70 6C 65 61 73 65 20	    displaydata:    db 'please set the time as 
				the format YEAR/MONTH/DAY HOUR/MINUTE/SECONED.a
				nd please input thne right time','$'  
       73 65 74 20 74 68 65	
       20 74 69 6D 65 20 61	
       73 20 74 68 65 20 66	
       6F 72 6D 61 74 20 59	
       45 41 52 2F 4D 4F 4E	
       54 48 2F 44 41 59 20	
       48 4F 55 52 2F 4D 49	
       4E 55 54 45 2F 53 45	
       43 4F 4E 45 44 2E 61	
       6E 64 20 70 6C 65 61	
       73 65 20 69 6E 70 75	
       74 20 74 68 6E 65 20	
       72 69 67 68 74 20 74	
       69 6D 65 24		
 0069  70 72 65 73 73 20 45	    setdonedata:    db 'press ESC to back main 
				menue, F1 chenge color.the time has benn change
				d,and the time you hava just modified 
       53 43 20 74 6F 20 62	
       61 63 6B 20 6D 61 69	
       6E 20 6D 65 6E 75 65	
       2C 20 46 31 20 63 68	
       65 6E 67 65 20 63 6F	
       6C 6F 72 2E 74 68 65	
       20 74 69 6D 65 20 68	
       61 73 20 62 65 6E 6E	
       20 63 68 61 6E 67 65	
       64 2C 61 6E 64 20 74	
       68 65 20 74 69 6D 65	
       20 79 6F 75 20 68 61	
       76 61 20 6A 75 73 74	
       20 6D 6F 64 69 66 69	
       65 64 20 69 73 20 3A	
       24			
				         
 00DA				        setclockstart: 
				                ;call clean 
				                ;call cleandatastack 
				 
 00DA  BE 0003 R		                mov si,offset displaydata 
 00DD  B6 04			                mov dh,4 
 00DF  B2 03			                mov dl,3 
 00E1  B4 02			                mov ah,2 
 00E3  E8 02F4 R		                call display 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-2


				 
				                ;call isescf1 
				                 
				 
 00E6  E8 0297 R		                call echostr2 
				                 
				 
 00E9  E8 017E R		                call getinput 
 00EC  2C 30			                sub al,30h 
 00EE  8A E0			                mov ah,al 
 00F0  E8 017E R		                call getinput 
 00F3  2C 30			                sub al,30h                     
				             ;write new data into cmos 
 00F5  E8 018A R		                call tratobcd 
 00F8  B4 09			                mov ah,9 
 00FA  E8 0199 R		                call writeto71 
				 
				 
				                 
 00FD  E8 017E R		                call getinput 
 0100  2C 30			                sub al,30h 
 0102  8A E0			                mov ah,al 
 0104  E8 017E R		                call getinput 
 0107  2C 30			                sub al,30h 
 0109  E8 018A R		                call tratobcd 
 010C  B4 08			                mov ah,8 
 010E  E8 0199 R		                call writeto71 
				 
				 
				 
 0111  E8 017E R		                call getinput 
 0114  2C 30			                sub al,30h 
 0116  8A E0			                mov ah,al 
 0118  E8 017E R		                call getinput 
 011B  2C 30			                sub al,30h 
 011D  E8 018A R		                call tratobcd 
 0120  B4 07			                mov ah,7 
 0122  E8 0199 R		                call writeto71 
				 
				 
 0125  E8 017E R		                call getinput 
 0128  2C 30			                sub al,30h 
 012A  8A E0			                mov ah,al 
 012C  E8 017E R		                call getinput 
 012F  2C 30			                sub al,30h 
 0131  E8 018A R		                call tratobcd 
 0134  B4 04			                mov ah,4 
 0136  E8 0199 R		                call writeto71 
				                 
				 
				 
 0139  E8 017E R		                call getinput 
 013C  2C 30			                sub al,30h 
 013E  8A E0			                mov ah,al 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-3


 0140  E8 017E R		                call getinput 
 0143  2C 30			                sub al,30h 
 0145  E8 018A R		                call tratobcd 
 0148  B4 02			                mov ah,2 
 014A  E8 0199 R		                call writeto71 
				 
				 
 014D  E8 017E R		                call getinput 
 0150  2C 30			                sub al,30h 
 0152  8A E0			                mov ah,al 
 0154  E8 017E R		                call getinput 
 0157  2C 30			                sub al,30h 
 0159  E8 018A R		                call tratobcd 
 015C  B4 00			                mov ah,0 
 015E  E8 0199 R		                call writeto71 
				 
				 
 0161				    endinput:   ;call clean 
 0161  BE 0069 R		                mov si,offset setdonedata 
 0164  B6 06			                mov dh,6 
 0166  B2 03			                mov dl,3 
 0168  B4 02			                mov ah,2 
 016A  E8 02F4 R		                call display 
 016D  BE 01AB R		                mov si,offset datastack2       
				              ;display the time user modified 
 0170  B6 08			                mov dh,8 
 0172  B2 14			                mov dl,20 
 0174  B4 07			                mov ah,7 
				                 
 0176  E8 02F4 R		    wait1:      call display 
				                 
 0179  E8 0324 R		                call isescf1 
				        
 017C  EB F8			                jmp short wait1 
				                             
				 
				 
 017E				        getinput: 
 017E  8A 07			                mov al,ds:[bx] 
 0180  43			                inc bx 
 0181  3C 24			                cmp al,'$' 
 0183  74 DC			                je endinput 
 0185  3C 30			                cmp al,30h 
 0187  72 F5			                jb getinput 
				                 
 0189  C3			                ret 
				                 
				         
 018A  52			        tratobcd:push dx 
 018B  51			                 push cx 
				                 
 018C  8A D0			                mov dl,al 
				 
 018E  B1 04			                mov cl,4 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-4


 0190  D2 E4			                shl ah,cl                ;the h
				ight part         
 0192  02 E2			                add ah,dl                 ;stor
				e in al 
 0194  8A C4			                mov al,ah 
 0196  59			                pop cx 
 0197  5A			                pop dx    
 0198  C3			                ret 
				         
				 
 0199				        writeto71: 
 0199  52			                push dx 
 019A  8A D0			                mov dl,al 
 019C  8A C4			                mov al,ah 
 019E  E6 70			                out 70h,al 
 01A0  8A C2			                mov al,dl                      
				 ;al set the port 
 01A2  E6 71			                out 71h,al 
 01A4  5A			                pop dx                      ;ah
				 to store the bcd to write 
 01A5  C3			                ret      
				 
				 
				 
				 
				;====================================echo strin
				g functoin=====================================
				=================== 
				 
				             
 01A6  EB 67 90			    charstack2:	jmp charstart2 
				 
 01A9  01CF R			    	top2 dw offset dataflush 
 01AB  20 20 2F 20 20 2F 20	    	datastack2: db ' ',' ','/',' ',' ','/',
				' ',' ',' ',' ',' ',':',' ',' ',':',' ',' ','$'
				 
       20 20 20 20 3A 20 20	
       3A 20 20 24		
 01BD  20 20 2F 20 20 2F 20	        datafomat:  db ' ',' ','/',' ',' ','/',
				' ',' ',' ',' ',' ',':',' ',' ',':',' ',' ','$'
				 
       20 20 20 20 3A 20 20	
       3A 20 20 24		
 01CF  0040[			        dataflush:  db 64 dup(0) 
	   00			
			 ]	
				
				     
 020F				    charstart2:  
 020F  53			    			push bx 
 0210  52			                push dx 
 0211  56			                push si 
 0212  06			                push es 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-5


				                 
				                 
 0213  50			                push ax 
 0214  8C C8			                mov ax,cs 
 0216  8E D8			                mov ds,ax 
 0218  58			                pop ax 
				 
				 
				 
 0219  80 FC 02			                cmp ah,2 
 021C  77 74			                ja sret2 
				                 
 021E  80 FC 00			                cmp ah,0 
 0221  74 0A			                je charpush2 
 0223  80 FC 01			                cmp ah,1 
 0226  74 14			                je charpop2 
 0228  80 FC 02			                cmp ah,2 
 022B  74 38			                je charshow2 
				 
				 
 022D  2E: 8B 1E 01A9 R		    charpush2:  mov bx,top2 
 0232  88 07			                mov ds:[bx],al 
 0234  2E: FF 06 01A9 R		                inc top2 
 0239  EB 57 90			                jmp sret2 
				 
 023C  2E: 81 3E 01A9 R 01CF	    charpop2:   cmp top2,offset dataflush 
	R			
 0243  74 4D			                je sret2 
 0245  2E: FF 0E 01A9 R		                dec top2 
 024A  2E: 8B 1E 01A9 R		                mov bx,top2 
 024F  8A 07			                mov al,[bx] 
				 
 0251  BF 01BD R		                mov di,offset datafomat 
 0254  BB 01AB R		                mov bx,offset datastack2 
 0257  B9 0012			                mov cx,18 
 025A  8A 05			    format:     mov al,ds:[di] 
 025C  88 07			                mov ds:[bx],al 
 025E  43			                inc bx 
 025F  47			                inc di 
 0260  E2 F8			                loop format    
 0262  EB 2E 90			                jmp sret2 
				 
				                
				 
				     
 0265  BE 01AB R		    charshow2:  mov si,offset datastack2 
				 
 0268  BB 01CF R		                mov bx,offset dataflush 
				         
 026B  B9 0006			    charshows2: mov cx,6 
 026E  2E: 3B 1E 01A9 R		                cmp bx,top2 
 0273  75 06			                jne noempty2 
 0275  EB 1B 90			                jmp sret2 
				                 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-6


 0278  B9 0006			                mov cx,6 
 027B  8A 07			    noempty2:   mov al,ds:[bx] 
 027D  88 04			                mov ds:[si],al 
 027F  43			                inc bx 
 0280  46			                inc si 
				                 
 0281  8A 07			                mov al,ds:[bx] 
 0283  88 04			                mov ds:[si],al 
 0285  46			                inc si 
 0286  46			                inc si 
 0287  43			                inc bx 
				 
 0288  E2 F1			                loop noempty2 
				                
 028A  B4 02			                mov ah,2 
 028C  BE 01AB R		                mov si,offset datastack2 
 028F  E8 02F4 R		                call display 
				 
				 
				                 
				 
				 
				        
 0292				    sret2:       
 0292  07			    			pop es 
 0293  5F			                pop di 
 0294  5A			                pop dx 
 0295  5B			                pop bx 
 0296  C3			                ret 
				 
 0297				echostr2:   
 0297  50			    getstr2:     push ax 
 0298  B4 02			                mov ah,2 
 029A  B6 08			                mov dh,8 
 029C  B4 02			                mov ah,2 
 029E  BE 01AB R		                mov si,offset datastack2 
 02A1  E8 02F4 R		                call display 
				     
				                ;call isescf1 
				 
 02A4  B4 00			    getstrs2:   mov ah,0 
 02A6  CD 16			                int 16h			 
 02A8  3C 20			                cmp al,20h		
									;judage
				 is a char 
 02AA  72 10			                jb nochar2  
 02AC  B4 00			                mov ah,0 
 02AE  E8 01A6 R		                call charstack2   	
								  ;push into st
				ack 
 02B1  B4 02			                mov ah,2 
 02B3  B6 08			                mov dh,8 
 02B5  B2 01			                mov dl,1 
 02B7  E8 01A6 R		                call charstack2    	
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-7


								    ;echo the s
				tr 
 02BA  EB E8			                jmp getstrs2 
				                 
 02BC  80 FC 0E			    nochar2:    cmp ah,0eh        	
									  ;is b
				ackspace 
 02BF  74 07			                je backspace2 
 02C1  80 FC 1C			                cmp ah,1ch 
 02C4  74 12			                je enter2            	
									;is ent
				er 
 02C6  EB DC			                jmp getstrs2 
				                 
 02C8  B4 01			    backspace2: mov ah,1 
 02CA  E8 01A6 R		                call charstack2 
 02CD  B4 02			                mov ah,2 
 02CF  B6 08			                mov dh,8 
 02D1  B2 01			                mov dl,1 
 02D3  E8 01A6 R		                call charstack2 
 02D6  EB CC			                jmp getstrs2 
				 
 02D8  B0 24			    enter2:     mov al,'$' 
 02DA  B4 00			                mov ah,0 
 02DC  E8 01A6 R		                call charstack2 
 02DF  B4 02			                mov ah,2 
 02E1  B6 08			                mov dh,8 
 02E3  B2 01			                mov dl,1 
				                 
 02E5  E8 01A6 R		                call charstack2 
 02E8  58			                pop ax 
 02E9  2E: C7 06 01A9 R 01CF	                mov top2,offset dataflush 
	R			
 02F0  BB 01CF R		                mov bx,offset dataflush 
 02F3  C3			                ret        		
									
					;return the echostr caller!!!!!!! 
				     
				 
				;======================display=================
				============= 
				 
				 
				 
 02F4  52			    display:    push dx 
 02F5  1E			                push ds  
 02F6  57			                push di 
 02F7  06			                push es 
 02F8  50			                push ax                        
				 ;stroe the color 
 02F9  8C C8			                mov ax,cs 
 02FB  8E D8			                mov ds,ax 
				                 
 02FD  B8 B800			                mov ax,0b800h 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-8


 0300  8E C0			                mov es,ax 
				     
				                        
 0302  8A C6			                mov al,dh                   ;dh
				 set row 
 0304  B6 A0			                mov dh,160                  ;dl
				 set cloumn 
 0306  F6 E6			                mul dh 
 0308  B6 00			                mov dh,0 
 030A  03 D2			                add dx,dx 
 030C  8B F8			                mov di,ax  
 030E  03 FA			                add di,dx 
				 
 0310  58			                pop ax 
				                 
				 
 0311  8A 04			    circlep:    mov al,ds:[si] 
 0313  3C 24			                cmp al,'$' 
 0315  74 08			                je outprint 
 0317  26: 89 05		                mov word ptr es:[di],ax 
 031A  47			                inc di 
 031B  47			                inc di 
 031C  46			                inc si 
 031D  EB F2			                jmp circlep 
				 
 031F  07			    outprint:   pop es 
 0320  5F			                pop di 
 0321  1F			                pop ds 
 0322  5A			                pop dx 
 0323  C3			                ret 
				        
				 
				;=================================is esc f1====
				================== 
 0324				 isescf1:        
				                 
 0324  B4 01			                mov ah,1                       
				 ;is content in keyboard buffer,return one cont
				ent code 
 0326  CD 16			                int 16h 
 0328  3C 1B			                cmp al,1bh                     
				 ;is esc 
 032A  74 0F			                je backmain 
 032C  80 FC 3B			                cmp ah,3bh                     
				 ; is f1 
 032F  74 13			                je colorchange 
 0331  80 FC 01			                cmp ah,1 
 0334  74 04			                je backit 
 0336  B4 00			                mov ah,0 
 0338  CD 16			                int 16h 
 033A				        backit:  
				                 
 033A  C3			                ret 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Page     1-9


				 
				 
 033B  B4 00			    backmain:   mov ah,0 
 033D  CD 16			                int 16h 
				                ;call clean 
				             
 033F  B8 4C00			                mov ax,4c00h 
 0342  CD 21			                int 21h 
				 
 0344  E8 034F R		    colorchange: call colorchanges 
 0347  B4 00			                mov ah,0 
 0349  CD 16			                int 16h 
 034B  8A E2			                mov ah,dl 
 034D  EB EB			                jmp backit 
				 
				 
 034F				colorchanges: 
 034F  51			                push cx 
 0350  06			                push es 
 0351  57			                push di 
				                 
				 
 0352  B9 0FA0			                mov cx,4000 
 0355  B8 B800			                mov ax,0b800h 
 0358  8E C0			                mov es,ax 
 035A  BF 0001			                mov di,1 
				                 
 035D  26: C6 05 01		    resetal:    mov byte ptr es:[di],1 
 0361				            circle1: 
 0361  26: 80 3D 07		                cmp byte ptr es:[di],7 
 0365  77 F6			                ja resetal 
				 
 0367  26: FE 05		                inc byte ptr es:[di] 
 036A  47			                inc di 
 036B  47			                inc di 
 036C  E2 F3			                loop circle1 
 036E  26: 8A 14		                mov dl,es:[si] 
 0371  5F			                pop di 
 0372  07			                pop es 
 0373  59			                pop cx 
				                 
				 
 0374  C3			                ret 
				 
				 
 0375				code ends 
				end setclock                 
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CODE . . . . . . . . . . . . . .  	0375	PARA	NONE	

Symbols:            

                N a m e         	Type	 Value	 Attr

BACKIT . . . . . . . . . . . . .  	L NEAR	033A	CODE
BACKMAIN . . . . . . . . . . . .  	L NEAR	033B	CODE
BACKSPACE2 . . . . . . . . . . .  	L NEAR	02C8	CODE

CHARPOP2 . . . . . . . . . . . .  	L NEAR	023C	CODE
CHARPUSH2  . . . . . . . . . . .  	L NEAR	022D	CODE
CHARSHOW2  . . . . . . . . . . .  	L NEAR	0265	CODE
CHARSHOWS2 . . . . . . . . . . .  	L NEAR	026B	CODE
CHARSTACK2 . . . . . . . . . . .  	L NEAR	01A6	CODE
CHARSTART2 . . . . . . . . . . .  	L NEAR	020F	CODE
CIRCLE1  . . . . . . . . . . . .  	L NEAR	0361	CODE
CIRCLEP  . . . . . . . . . . . .  	L NEAR	0311	CODE
COLORCHANGE  . . . . . . . . . .  	L NEAR	0344	CODE
COLORCHANGES . . . . . . . . . .  	L NEAR	034F	CODE

DATAFLUSH  . . . . . . . . . . .  	L NEAR	01CF	CODE
DATAFOMAT  . . . . . . . . . . .  	L NEAR	01BD	CODE
DATASTACK2 . . . . . . . . . . .  	L NEAR	01AB	CODE
DISPLAY  . . . . . . . . . . . .  	L NEAR	02F4	CODE
DISPLAYDATA  . . . . . . . . . .  	L NEAR	0003	CODE

ECHOSTR2 . . . . . . . . . . . .  	L NEAR	0297	CODE
ENDINPUT . . . . . . . . . . . .  	L NEAR	0161	CODE
ENTER2 . . . . . . . . . . . . .  	L NEAR	02D8	CODE

FORMAT . . . . . . . . . . . . .  	L NEAR	025A	CODE

GETINPUT . . . . . . . . . . . .  	L NEAR	017E	CODE
GETSTR2  . . . . . . . . . . . .  	L NEAR	0297	CODE
GETSTRS2 . . . . . . . . . . . .  	L NEAR	02A4	CODE

ISESCF1  . . . . . . . . . . . .  	L NEAR	0324	CODE

NOCHAR2  . . . . . . . . . . . .  	L NEAR	02BC	CODE
NOEMPTY2 . . . . . . . . . . . .  	L NEAR	027B	CODE

OUTPRINT . . . . . . . . . . . .  	L NEAR	031F	CODE

RESETAL  . . . . . . . . . . . .  	L NEAR	035D	CODE

SETCLOCK . . . . . . . . . . . .  	L NEAR	0000	CODE
SETCLOCKSTART  . . . . . . . . .  	L NEAR	00DA	CODE
SETDONEDATA  . . . . . . . . . .  	L NEAR	0069	CODE
SRET2  . . . . . . . . . . . . .  	L NEAR	0292	CODE
Microsoft (R) Macro Assembler Version 5.00                  4/18/17 20:02:18
                                                             Symbols-2



TOP2 . . . . . . . . . . . . . .  	L WORD	01A9	CODE
TRATOBCD . . . . . . . . . . . .  	L NEAR	018A	CODE

WAIT1  . . . . . . . . . . . . .  	L NEAR	0176	CODE
WRITETO71  . . . . . . . . . . .  	L NEAR	0199	CODE

@FILENAME  . . . . . . . . . . .  	TEXT  echostr2		


    403 Source  Lines
    403 Total   Lines
     41 Symbols

  50994 + 449166 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
