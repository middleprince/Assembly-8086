Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-1


				assume		cs:code 
				 
 0000				code segment 
 0000				start: 
				 
 0000  E9 008F R		setclock:	jmp setclockstart 
 0003  70 6C 65 61 73 65 20		displaydata:	db'please set the time 
				as the format year/month/day hour/minute/secone
				d.and year arry from 0 to 99.'	 
       73 65 74 20 74 68 65	
       20 74 69 6D 65 20 61	
       73 20 74 68 65 20 66	
       6F 72 6D 61 74 20 79	
       65 61 72 2F 6D 6F 6E	
       74 68 2F 64 61 79 20	
       68 6F 75 72 2F 6D 69	
       6E 75 74 65 2F 73 65	
       63 6F 6E 65 64 2E 61	
       6E 64 20 79 65 61 72	
       20 61 72 72 79 20 66	
       72 6F 6D 20 30 20 74	
       6F 20 39 39 2E		
 0063  74 68 65 20 74 69 6D		setdonedata:	db 'the time has benn c
				hanged,the new time is :','$'	 
       65 20 68 61 73 20 62	
       65 6E 6E 20 63 68 61	
       6E 67 65 64 2C 74 68	
       65 20 6E 65 77 20 74	
       69 6D 65 20 69 73 20	
       3A 24			
						 
 008F						setclockstart: 
 008F  BE 0003 R						mov si,offset d
				isplaydata 
 0092  E8 0149 R						call display 
				 
 0095  E8 016C R						call echostr 
								 
				 
 0098  E8 0121 R						call getinput 
 009B  2C 30							sub al,30h 
 009D  8A E0							mov ah,al 
 009F  E8 0121 R						call getinput 
 00A2  2C 30							sub al,30h 
 00A4  E8 012D R						call tratobcd 
 00A7  B4 09							mov ah,9 
 00A9  E8 013C R						call writeto71 
				 
				 
								 
 00AC  E8 0121 R						call getinput 
 00AF  2C 30							sub al,30h 
 00B1  8A E0							mov ah,al 
 00B3  E8 0121 R						call getinput 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-2


 00B6  2C 30							sub al,30h 
 00B8  E8 012D R						call tratobcd 
 00BB  B4 08							mov ah,8 
 00BD  E8 013C R						call writeto71 
				 
				 
				 
 00C0  E8 0121 R						call getinput 
 00C3  2C 30							sub al,30h 
 00C5  8A E0							mov ah,al 
 00C7  E8 0121 R						call getinput 
 00CA  2C 30							sub al,30h 
 00CC  E8 012D R						call tratobcd 
 00CF  B4 07							mov ah,7 
 00D1  E8 013C R						call writeto71 
				 
				 
 00D4  E8 0121 R						call getinput 
 00D7  2C 30							sub al,30h 
 00D9  8A E0							mov ah,al 
 00DB  E8 0121 R						call getinput 
 00DE  2C 30							sub al,30h 
 00E0  E8 012D R						call tratobcd 
 00E3  B4 04							mov ah,4 
 00E5  E8 013C R						call writeto71 
								 
				 
				 
 00E8  E8 0121 R						call getinput 
 00EB  2C 30							sub al,30h 
 00ED  8A E0							mov ah,al 
 00EF  E8 0121 R						call getinput 
 00F2  2C 30							sub al,30h 
 00F4  E8 012D R						call tratobcd 
 00F7  B4 02							mov ah,2 
 00F9  E8 013C R						call writeto71 
				 
				 
 00FC  E8 0121 R						call getinput 
 00FF  2C 30							sub al,30h 
 0101  8A E0							mov ah,al 
 0103  E8 0121 R						call getinput 
 0106  2C 30							sub al,30h 
 0108  E8 012D R						call tratobcd 
 010B  B4 00							mov ah,0 
 010D  E8 013C R						call writeto71 
				 
 0110  BE 0063 R			endinput:	mov si,offset setdoneda
				ta 
 0113  E8 0149 R						call display 
 0116  BE 01BF R						mov si,offset d
				atastack 
 0119  E8 0149 R						call display 
								 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-3


				 
 011C  B8 4C00							mov ax,4c00h 
 011F  CD 21							int 21h 
								 
				 
				 
 0121						getinput: 
 0121  8A 07							mov al,ds:[bx] 
 0123  3C 24							cmp al,'$' 
 0125  74 E9							je endinput 
 0127  3C 30							cmp al,30h 
 0129  72 F6							jb getinput 
 012B  43					 		inc bx 
 012C  C3							ret 
								 
					 
				 
								 
				 
						 
 012D  52					tratobcd:push dx 
 012E  51							push cx 
								 
 012F  8A D0							mov dl,al 
				 
 0131  B1 04							mov cl,4 
 0133  D2 E4							shl ah,cl 
								 ;the hight par
				t		 
 0135  02 E2							add ah,dl
								;store in al 
 0137  8A C4							mov al,ah 
 0139  59							pop cx 
 013A  5A							pop dx	  
 013B  C3							ret 
						 
				 
 013C						writeto71: 
 013C  52							push dx 
 013D  8A D0							mov dl,al 
 013F  8A C4							mov al,ah 
 0141  E6 70							out 70h,al 
 0143  8A C2							mov al,dl
									
					;al set the port 
 0145  E6 71							out 71h,al 
 0147  5A							pop dx	
									;ah to 
				store the bcd to write 
 0148  C3						    ret      
				 
						 
				 
				 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-4


 0149				display:  
 0149  1E			            push ds  
 014A  57			            push di 
 014B  06			            push es 
				 
 014C  8C C8			            mov ax,cs 
 014E  8E D8			            mov ds,ax 
				             
 0150  B8 B800			            mov ax,0b800h 
 0153  8E C0			            mov es,ax 
 0155  BF 02D0			            mov di,160*4+40*2 
 0158  B4 01			            mov ah,1 
				 
 015A  8A 04			circlep:     mov al,ds:[si] 
 015C  3C 24			            cmp al,'$' 
 015E  74 08			            je outprint 
 0160  26: 89 05		            mov es:[di],ax 
 0163  47			            inc di 
 0164  47			            inc di 
 0165  46			            inc si 
 0166  EB F2			            jmp circlep 
				 
 0168  07			outprint:   pop es 
 0169  5F			            pop di 
 016A  1F			            pop ds 
 016B  C3			            ret 
				 
				 
				 
				 
				 
				 
				 
				 
				 
 016C				echostr: 
 016C  50			    getstr:     push ax 
				                 
 016D  B4 00			    getstrs:    mov ah,0 
 016F  CD 16			                int 16h			 
 0171  3C 20			                cmp al,20h		
									;judage
				 is a char 
 0173  72 10			                jb nochar  
 0175  B4 00			                mov ah,0 
 0177  E8 01BA R		                call charstack    	
								  ;push into st
				ack 
 017A  B4 02			                mov ah,2 
 017C  B6 04			                mov dh,4 
 017E  B2 01			                mov dl,1 
 0180  E8 01BA R		                call charstack    	
								    ;echo the s
				tr 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-5


 0183  EB E8			                jmp getstrs 
				                 
 0185  80 FC 0E			    nochar:     cmp ah,0eh        	
									  ;is b
				ackspace 
 0188  74 07			                je backspace 
 018A  80 FC 1C			                cmp ah,1ch 
 018D  74 12			                je enter            	
									;is ent
				er 
 018F  EB DC			                jmp getstrs 
				                 
 0191  B4 01			    backspace:  mov ah,1 
 0193  E8 01BA R		                call charstack 
 0196  B4 02			                mov ah,2 
 0198  B6 04			                mov dh,4 
 019A  B2 01			                mov dl,1 
 019C  E8 01BA R		                call charstack 
 019F  EB CC			                jmp getstrs 
				 
 01A1  B0 00			    enter:      mov al,0 
 01A3  B4 00			                mov ah,0 
 01A5  E8 01BA R		                call charstack 
 01A8  B4 02			                mov ah,2 
 01AA  B6 04			                mov dh,4 
 01AC  B2 01			                mov dl,1 
 01AE  E8 01BA R		                call charstack 
				 
 01B1  8C C8			                mov ax,cs 
 01B3  8E D8			                mov ds,ax 
 01B5  BB 01BF R		                mov bx,offset datastack 
 01B8  58			                pop ax 
				 
 01B9  C3			                ret        		
									
					;return the echostr caller!!!!!!! 
				 
				            
				                 
 01BA  E9 023F R		    charstack:  jmp  charstart 
				     
 01BD  01BF R			    top dw offset datastack 
				 
 01BF  0080[			    datastack: db 128 dup(0) 
	   00			
			 ]	
				
				 
 023F  53			    charstart:  push bx 
 0240  52			                push dx 
 0241  56			                push si 
 0242  06			                push es 
				 
				                 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-6


				                 
 0243  50			                push ax 
 0244  8C C8			                mov ax,cs 
 0246  8E D8			                mov ds,ax 
 0248  58			                pop ax 
				 
 0249  80 FC 02			                cmp ah,2 
 024C  77 6A			                ja sret 
				                 
 024E  80 FC 00			                cmp ah,0 
 0251  74 0A			                je charpush 
 0253  80 FC 01			                cmp ah,1 
 0256  74 14			                je charpop 
 0258  80 FC 02			                cmp ah,2 
 025B  74 27			                je charshow 
				 
				 
 025D  2E: 8B 1E 01BD R		    charpush:   mov bx,top 
 0262  88 07			                mov ds:[bx],al 
 0264  2E: FF 06 01BD R		                inc top 
 0269  EB 4D 90			                jmp sret 
				 
 026C  2E: 81 3E 01BD R 01BF	    charpop:    cmp top,offset datastack 
	R			
 0273  74 43			                je sret 
 0275  2E: FF 0E 01BD R		                dec top 
 027A  2E: 8B 1E 01BD R		                mov bx,top 
 027F  8A 07			                mov al,[bx] 
 0281  EB 35 90			                jmp sret 
				 
				                
				 
 0284  BB B800			    charshow:   mov bx,0b800h 
 0287  8E C3			                mov es,bx 
 0289  B0 A0			                mov al,160 
 028B  B4 00			                mov ah,0 
 028D  F6 E6			                mul dh 
 028F  8B F8			                mov di,ax 
 0291  02 D2			                add dl,dl 
 0293  B6 00			                mov dh,0 
 0295  03 FA			                add di,dx 
				 
 0297  BB 01BF R		                mov bx,offset datastack 
				         
 029A  2E: 3B 1E 01BD R		    charshows:  cmp bx,top 
 029F  75 07			                jne noempty 
 02A1  26: C6 05 20		                mov byte ptr es:[di],' ' 
 02A5  EB 11 90			                jmp sret 
 02A8  8A 07			    noempty:    mov al,ds:[bx] 
 02AA  26: 88 05		                mov es:[di],al  
 02AD  26: C6 45 02 20		                mov byte ptr es:[di+2],' ' 
 02B2  43			                inc bx 
 02B3  83 C7 02			                add di,2 
 02B6  EB E2			                jmp charshows 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Page     1-7


				 
 02B8  07			    sret:       pop es 
 02B9  5F			                pop di 
 02BA  5A			                pop dx 
 02BB  5B			                pop bx 
 02BC  C3			                ret 
				 
 02BD				code ends 
				end start 
Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CODE . . . . . . . . . . . . . .  	02BD	PARA	NONE	

Symbols:            

                N a m e         	Type	 Value	 Attr

BACKSPACE  . . . . . . . . . . .  	L NEAR	0191	CODE

CHARPOP  . . . . . . . . . . . .  	L NEAR	026C	CODE
CHARPUSH . . . . . . . . . . . .  	L NEAR	025D	CODE
CHARSHOW . . . . . . . . . . . .  	L NEAR	0284	CODE
CHARSHOWS  . . . . . . . . . . .  	L NEAR	029A	CODE
CHARSTACK  . . . . . . . . . . .  	L NEAR	01BA	CODE
CHARSTART  . . . . . . . . . . .  	L NEAR	023F	CODE
CIRCLEP  . . . . . . . . . . . .  	L NEAR	015A	CODE

DATASTACK  . . . . . . . . . . .  	L NEAR	01BF	CODE
DISPLAY  . . . . . . . . . . . .  	L NEAR	0149	CODE
DISPLAYDATA  . . . . . . . . . .  	L NEAR	0003	CODE

ECHOSTR  . . . . . . . . . . . .  	L NEAR	016C	CODE
ENDINPUT . . . . . . . . . . . .  	L NEAR	0110	CODE
ENTER  . . . . . . . . . . . . .  	L NEAR	01A1	CODE

GETINPUT . . . . . . . . . . . .  	L NEAR	0121	CODE
GETSTR . . . . . . . . . . . . .  	L NEAR	016C	CODE
GETSTRS  . . . . . . . . . . . .  	L NEAR	016D	CODE

NOCHAR . . . . . . . . . . . . .  	L NEAR	0185	CODE
NOEMPTY  . . . . . . . . . . . .  	L NEAR	02A8	CODE

OUTPRINT . . . . . . . . . . . .  	L NEAR	0168	CODE

SETCLOCK . . . . . . . . . . . .  	L NEAR	0000	CODE
SETCLOCKSTART  . . . . . . . . .  	L NEAR	008F	CODE
SETDONEDATA  . . . . . . . . . .  	L NEAR	0063	CODE
SRET . . . . . . . . . . . . . .  	L NEAR	02B8	CODE
START  . . . . . . . . . . . . .  	L NEAR	0000	CODE

TOP  . . . . . . . . . . . . . .  	L WORD	01BD	CODE
TRATOBCD . . . . . . . . . . . .  	L NEAR	012D	CODE

WRITETO71  . . . . . . . . . . .  	L NEAR	013C	CODE

@FILENAME  . . . . . . . . . . .  	TEXT  bcdt		

Microsoft (R) Macro Assembler Version 5.00                  4/15/17 12:59:21
                                                             Symbols-2



    285 Source  Lines
    285 Total   Lines
     31 Symbols

  50946 + 449214 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
